clear
addpath ./RIR-Generator-master
addpath ./functions
mex -setup c++
mex RIR-Generator-master/rir_generator.cpp;
addpath ./stft
addpath ./shortSpeech

% ---- TRAINING DATA ----
% room setup
disp('Setting up the room');
% ---- Initialize Parameters for training ----


%---- load training data (check mat_trainParams for options)----
load('mat_outputs/monoTestSource_biMicCircle_5L100U.mat')
% load('mat_outputs/movementOptParams')

%---- initialize params ----
vari = varis_set(I,:);
scales = scales_set(I,:);
[~,sigmaL] = trCovEst(nL, nD, numArrays, RTF_train, kern_typ, scales);
gammaL = inv(sigmaL + diag(ones(1,nL).*vari));
mic_ref = [3 5 1; 5 3 1; 3 1 1; 1 3 1];
radii = [0:.25:1];
its_per = 1;
wav_folder = dir('./shortSpeech/');
wav_folder = wav_folder(3:27);
accs = struct([]);
snrs = -20:5:30;
mc_iters= 100;

%---- initialize groundtruths ----
mean_errs = .2; 
model_vari = .4;
mrf_thresh = .25;

for s = 1:size(snrs,2)
    
    snr = snrs(s);   
%     mean_err = mean_errs(s);
    mean_err = mean_errs;
    tps = zeros(1,3);
    fps = zeros(1,3);
    tns = zeros(1,3);
    fns = zeros(1,3);
        
    for mc = 1:mc_iters
        mc_acc_curr = struct([]);

        for riter = 1:size(radii,2)
            rad_acc_curr = struct([]);
            arr_rad = radii(riter);
            %randomize test source, new position of random microphone (new
            %position is on circle based off radius_mic), random rotation
            %of microphones, and random sound file
            sourceTest = randSourcePos(1, roomSize, radiusU, ref);
            movingArray = randi(4);
            micsPosNew = micRotate(roomSize, arr_rad, mic_ref, movingArray, micsPos, numArrays, numMics);
         
            %get random speech signal and add noise
            rand_wav = randi(numel(wav_folder));
            file = wav_folder(rand_wav).name;
            [x_tst,fs_in] = audioread(file);
            [numer, denom] = rat(fs/fs_in);
            x_tst = resample(x_tst,numer,denom);
            x_tst = x_tst';
            noisy_signals = zeros(numArrays, size(x_tst,2));
            
            for n = 1:numArrays
                noisy_signals(n,:) = awgn(x_tst,snr);
            end
    
            %---- Initialize subnet estimates of training positions ----
            sub_p_hat_ts = zeros(numArrays, 3); 
            for k = 1:numArrays
                [subnet, subscales, trRTF] = subNet(k, numArrays, numMics, scales, micsPos, RTF_train);
                [~,~,sub_p_hat_ts(k,:)] = test(noisy_signals, gammaL, trRTF, subnet, rirLen, rtfLen, numArrays-1, numMics, sourceTrain,...
                    sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ, subscales);  
            end

            [self_sub_p_hat_ts, p_fail, posteriors] = moveDetector(noisy_signals, gammaL, numMics, numArrays, micsPosNew, 1, 0, sub_p_hat_ts, scales, RTF_train,...
                    rirLen, rtfLen, sourceTrain, sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ);

                
        %---- estimate test positions before movement ----
            [~,~, pre_p_hat_t] = test(noisy_signals, gammaL, RTF_train, micsPos, rirLen, rtfLen, numArrays,...
                            numMics, sourceTrain, sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ, scales);
        %---- estimate test positions after movement ----
            [~,~, p_hat_t] = test(noisy_signals, gammaL, RTF_train, micsPosNew, rirLen, rtfLen, numArrays,...
                            numMics, sourceTrain, sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ, scales);

            %naive estimate calculated based off variance of new
            %positional estimates and ones taken in training. If estimate sd greater than
            %standard deviation of error of static model then we predict
            %movement.
            naive_p_fail = norm(p_hat_t - pre_p_hat_t);
            naive2_p_fail = mean(std(self_sub_p_hat_ts- sub_p_hat_ts));
            
            %if p_fail is greater than mrf_thresh, flag movement, and if
            %naive fails are greater than model_vari, flag movement (1), 
            %else flag no movement (0).
            if p_fail > mrf_thresh
                mrf_flag = 1;
            else
                mrf_flag = 0;
            end
            if naive_p_fail > model_vari
               naive_flag = 1;
            else
                naive_flag = 0;
            end
            if naive2_p_fail > model_vari
               naive2_flag = 1;
            else
                naive2_flag = 0;
            end
            
            %ground truth determined based on if movement was greater than
            %mean error recorded in 'ideal conditions' (SNR of 30 dB).
            if and(mean_errs > arr_rad, mrf_flag == 1)
                tps(1) = tps(1) + 1;
%                 rad_acc_curr.mrf_res_tps = tps(1);
            elseif and(mean_errs < arr_rad, mrf_flag == 1)
                fps(1) = fps(1)+1;
%                 rad_acc_curr.mrf_res_fps = fps(1);
            elseif and(mean_errs < arr_rad, mrf_flag == 0)
                tns(1) = tns(1) + 1;
%                 rad_acc_curr(1).mrf_res_tns = tns(1);
            elseif and(mean_errs > arr_rad, mrf_flag == 0)
                fns(1) = fns(1) + 1;
%                 rad_acc_curr(1).mrf_res_tns = tns(1);
            end
            
            
            if and(mean_errs > arr_rad, naive_flag == 1)
                tps(2) = tps(2) + 1;
%                 rad_acc_curr.naive1_res_tpr = tps(2);
            elseif and(mean_errs < arr_rad, naive_flag == 1)
                fps(2) = fps(2)+1;
%                 rad_acc_curr.naive1_res_fpr = fps(2);
            elseif and(mean_errs < arr_rad, naive_flag == 0)
                tns(2) = tns(2) + 1;
%                 rad_acc_curr.naive1_res_tns = tns(2);
            end
            
            if and(mean_errs > arr_rad, naive2_flag == 1)
                tps(3) = tps(3) + 1;
%                 rad_acc_curr.naive2_res_tpr = tps(3);
            elseif and(mean_errs < arr_rad, naive2_flag == 1)
                fps(3) = fps(3)+1;
%                 rad_acc_curr.naive2_res_fpr = fps(3);
            elseif and(mean_errs < arr_rad, naive2_flag == 0)
                tns(3) = tns(3) + 1;
%                 rad_acc_curr.naive2_res_tns = tns(3);
            end
        end
%         mc_acc_curr.mrf_tps = mc_acc_curr.mrf_tps + tps(1);
%         mc_acc_curr.naive1_tps = mc_acc_curr.naive1_tps + tps(2);
%         mc_acc_curr.naive2_tps = mc_acc_curr.naive2_tps + tps(3);
%         
%         mc_acc_curr.mrf_fps = mc_acc_curr.mrf_fps + fps(1);
%         mc_acc_curr.naive1_fps = mc_acc_curr.naive1_fps + fps(2);
%         mc_acc_curr.naive2_fps = mc_acc_curr.naive2_fps + fps(3);
%         
%         mc_acc_curr.mrf_tns = mc_acc_curr.mrf_tns + tns(1);
%         mc_acc_curr.naive1_tns = mc_acc_curr.naive1_tns + tns(2);
%         mc_acc_curr.naive2_tns = mc_acc_curr.naive2_tns + tns(3);
    end
%     accs(s).neg20pos30x5 = mc_acc_curr;
    accs(s).neg20pos30x5 = [tps(1)/mc_iters fps(1)/mc_iters tns(1)/mc_iters; tps(2)/mc_iters fps(2)/mc_iters tns(2)/mc_iters; tps(3)/mc_iters fps(3)/mc_iters tns(3)/mc_iters];
end

save('mat_results/5L100U_neg20pos30x5', 'accs')
