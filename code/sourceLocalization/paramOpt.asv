function [] = paramOpt(radii, )
    num_radii = size(radi
    tp_ch_curr = 0;
    fp_ch_curr = 0;
    tn_ch_curr = 0;
    fn_ch_curr = 0;
    
    for riter = 1:num_radii
        radius_mic = radii(riter);

        for thr = 1:num_threshes
            thresh = threshes(thr);

            for iters = 1:num_iters      
                %randomize tst source, new position of random microphone (new
                %position is on circle based off radius_mic), random rotation to
                %microphones, and random sound file (max 4 seconds).
                sourceTest = randSourcePos(1, roomSize, radiusU, ref);
                movingArray = randi(numArrays);
                [~, micsPosNew] = micRotate(roomSize, radius_mic, mic_ref, movingArray, micsPos, numArrays, numMics);
    %             randMicPos = mic_ref(1,:)+[0 radius_mic 0];
    %             new_x1 = randMicPos(:,1)+.025;
    %             new_y1 = randMicPos(:,2);
    %             new_x2 = randMicPos(:,1)-.025;
    %             new_y2 = randMicPos(:,2);
    %             micsPosNew = [new_x1 new_y1 1;new_x2 new_y2 1; micsPos(1+numMics:end,:)];
                wavs = dir('./shortSpeech/');
    %             wav_folder = wavs(3:27);
                rand_wav = randi(25);
                try
                    file = wavs(rand_wav+2).name;
                    [x_tst,fs_in] = audioread(file);
                    [numer, denom] = rat(fs/fs_in);
                    x_tst = resample(x_tst,numer,denom);
                    x_tst = x_tst';  
                catch
                    continue
                end    

              %---- Initialize subnet estimates of training positions ----
                sub_p_hat_ts = zeros(numArrays, 3); 
                for k = 1:numArrays
                    [subnet, subscales, trRTF] = subNet(k, numArrays, numMics, scales, micsPos, RTF_train);
                    [~,~,sub_p_hat_ts(k,:)] = test(x_tst, gammaL, trRTF, subnet, rirLen, rtfLen, numArrays-1, numMics, sourceTrain,...
                        sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ, subscales);  
                end
                [self_sub_p_hat_ts, p_fail, posteriors] = moveDetectorOpt(x_tst, transMat, init_var, lambda, eMax, thresh, gammaL, numMics, numArrays, micsPosNew, 1, 0, sub_p_hat_ts, scales, RTF_train,...
                        rirLen, rtfLen, sourceTrain, sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ);

        %     %---- estimate test positions after movement ----
                [~,~, p_hat_t] = test(x_tst, gammaL, RTF_train, micsPosNew, rirLen, rtfLen, numArrays,...
                                numMics, sourceTrain, sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ, scales);

                mean_naives = zeros(numArrays,1);
                sub_naives = zeros(numArrays,1);
                naive_p_hat_ts = zeros(numArrays,3);
                for k = 1:numArrays
        %                 [subnet, subscales, trRTF] = subNet(k, numArrays, numMics, scales, micsPos, RTF_train);
                    subnet = micsPos((k-1)*numMics+1:k*numMics,:);
                    subscales = micScales(k,:);
                    gammaL = reshape(gammaLs(k,:,:),[nL,nL]);
                    trRTF = reshape(micRTF_train(k,:,:,:), [nD, rtfLen, numMics]);
                    [~,~,naive_p_hat_ts(k,:)] = test(x_tst, gammaL, trRTF, subnet, rirLen, rtfLen, 1, numMics, sourceTrain,...
                        sourceTest, nL, nU, roomSize, T60, c, fs, kern_typ, subscales);  
                    sub_naives(k) = mean((naive_p_hat_ts(k,:)-sub_p_hat_ts(k,:)).^2);
                end

                mean_naives(1) = mean(pdist(naive_p_hat_ts(2:4,:)));
                mean_naives(2) = mean(pdist([naive_p_hat_ts(1,:); naive_p_hat_ts(3:4,:)]));
                mean_naives(3) = mean(pdist([naive_p_hat_ts(1:2,:); naive_p_hat_ts(4,:)]));
                mean_naives(4) = mean(pdist(naive_p_hat_ts(1:3,:)));

                local_fail = mean(mean(((sourceTest-p_hat_t).^2)));
    %                         local_fails(t,riter, thr) = local_fails(t,riter, thr)+local_fail;
    %                         p_fails(t,riter, thr) = p_fails(t,riter, thr)+p_fail;

                mrfMovingArray = find(round(posteriors(:,2),1));

                if local_fail > modelMean+modelSd        
                    if p_fail > thresh
                        tp_ch_curr = tp_ch_curr + 1;
                    else
                        fn_ch_curr = fn_ch_curr + 1;
                    end                                                       
                end

                if local_fail < modelMean+modelSd
                    if p_fail > thresh
                        fp_ch_curr = fp_ch_curr + 1;
                    else
                        tn_ch_curr = tn_ch_curr + 1;
                    end
                end
            end
        end
    end


end