
clear
addpath ./RIR-Generator-master
addpath ./functions
mex -setup c++
mex RIR-Generator-master/rir_generator.cpp;
addpath ./stft
addpath ./shortSpeech

% ---- TRAINING DATA ----
% room setup
disp('Setting up the room');
%---- load training data (check mat_trainParams for options)----
load('mat_outputs/monoTestSource_biMicCircle_5L50U.mat')

%---- Initialize storage parameters ----
sourceTest = [3.5, 3.5, 1];
iters = 3;
% Q_t = inv(sigmaL+rand*10e-3*eye(size(sigmaL)));
%---- Initialize bayes parameters (via Van Vaerenbergh method) ----
[mu, cov, Q_t] = bayesInit(nL, sourceTrainL, RTF_train, kern_typ, scales, numArrays, vari);
q_t_new = zeros(nL,1);
h_t_new = zeros(nL,1);
thresh = .4;
budgetL = nL;
budgetStr = ceil(nL*1.5);
p_fail = 0;
posteriors = zeros(numArrays, 3);
sub_p_hat_ts = zeros(numArrays, 3); 
self_sub_p_hat_ts = zeros(numArrays, 3);
mvFlag = 0;
rtf_str = zeros(budgetStr,rtfLen, numArrays);
est_str = zeros(budgetStr,3);
numStr = 1; upd = 0;
labels = cell(1,4);
iter = 0;

%---- Initialize moving mic line params ----
movingArray = 1;
init_pauses = 1;
end_pauses = 10;
moving_iters = 4;
numMovePoints = moving_iters + end_pauses + init_pauses;
height = 1;
movingMicsPos = [micLine(micsPos(movingArray,:), [.5,5.5,1], moving_iters), height*ones(moving_iters,1)];
movingMicsPos = [[3 5 1].*ones(init_pauses,3);movingMicsPos];
movingMicsPos = [movingMicsPos; [.5,5.5,1].*ones(end_pauses,3)];


%---- Initialize subnet estimates of training positions ----
randL = randi(numArrays, 1);
holderTest = sourceTrain(randL,:);
for k = 1:numArrays
    [subnet, subscales, trRTF] = subNet(k, numArrays, numMics, scales, micsPos, RTF_train);
    [~,~,sub_p_hat_ts(k,:)] = test(x, gammaL, trRTF, subnet, rirLen, rtfLen, numArrays-1, numMics, sourceTrain,...
        holderTest, nL, nU, roomSize, T60, c, fs, kern_typ, subscales);  
end

mvmnt_truth = [1 0 0; 0 1 0; 0 1 0; 0 1 0];
static_truth = [ones(4,1) zeros(4,1) zeros(4,1)];
ground_truth = zeros(size(posteriors), numMovePoints);
ground_truth(:,:,1:init_pauses) = static_truth;
ground_truth(:,:,init_pauses+1:moving_iters) = mvmnt_truth;
ground_truth(:,:,init_pauses+moving_iters+1:end) = static_truth;


